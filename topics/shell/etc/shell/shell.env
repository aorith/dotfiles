# vim: ft=bash

### git/env/all/shell/00_settings

if [[ -n $IN_KITTY ]] || [[ -n $IN_TMUX ]]; then
    export GIT_PAGER=delta
fi

### kitty/env/all/shell/00_settings

if [[ -n "$IN_KITTY" ]]; then
    # remote hosts do not have xterm-kitty terminfo
    export SSH_TERM="xterm-256color"
fi


### python/env/Darwin/shell/01_constants

export PYENV_ROOT="$HOME/.local/share/pyenv_git"

### shell_private/env/all/shell/01_functions

# to cd into dotfiles
dotfiles() {
    if [[ -z "$1" ]]; then
        echo "Changing directory to $DOTFILES"
        cd $DOTFILES || return 1
        return 0
    fi

    TOPICS=(
        $(find $DOTFILES/topics/* -maxdepth 0 -type d -exec basename {} \;)
        $(find $PRIVATE_DOTFILES/topics/* -maxdepth 0 -type d -exec basename {} \;)
    )

    cd_to() {
        for topic in $DOTFILES/topics/* $PRIVATE_DOTFILES/topics/*; do
            echo "$(basename $topic)" | grep -Ewq "$1" && \
                cd "$topic" && echo "Found $1 ... changing directory." && return 0
        done
        return 1
    }

    if ! cd_to "$1"; then
        echo "No se pudo encontrar o cambiar de directorio al topic \"$1\"."
        return 1
    fi
    return 0
}

# convert bytes to MiB
bytes_to_mib() {
    [[ $1 =~ ^[0-9]+ ]] || return 1
    echo "scale=2; $1 / 1048576" | bc -l
}

# convert bytes to GiB
bytes_to_gib() {
    [[ $1 =~ ^[0-9]+ ]] || return 1
    echo "scale=2; $1 / 1073741824" | bc -l
}

### tcdn/env/all/shell/01_functions

# como siempre me olvido, funcion al canto
tcdn_curl_resolv() {
    echo
    echo -e "${my_ylw}curl -svo /dev/null --resolve dominio:<PUERTO>:<ORIGEN> <URL> -H 'TCDN-Debug:1'${my_rst}"
    echo
    local URL dominio oport origen proto
    read -rp "URL: " URL
    [[ $URL =~ ^https?:// ]] || { echo; echo "La URL debe contener el protocolo: (http(s)://...)"; echo; return 1; }
    read -rp "Puerto en origen: " oport
    read -rp "IP/dominio de origen: " origen
    dominio="$(echo "$URL" | awk -F[/:] '{print $4}')"
    echo
    echo "curl -svo /dev/null --resolve ${dominio}:${oport}:${origen} "$URL" -H 'TCDN-Debug:1' 2>&1"
    echo
}

tcdn_checkcert() {
    [[ $# -ne 1 ]] && return 1
    local site
    site=$1
    echo -n | openssl s_client -servername ${site} -connect ${site}:443 2>/dev/null
    echo -n | openssl s_client -servername ${site} -connect ${site}:443 2>/dev/null | openssl x509 -noout -dates
}


### tmux/env/all/shell/01_functions

# tmux
tmux() {
    local EXE
    EXE='command tmux'
    #EXE="$HOME/opt/bin/tmux"
    if [[ $# -ne 0 ]]; then $EXE -u "$@"
    elif ! $EXE -u attach; then $EXE -u; fi
}


### tcdn/env/all/shell/02_path

add_to_path "${PRIVATE_DOTFILES}/topics/tcdn/bin"

### python/env/Darwin/shell/02_path

add_to_path "${PYENV_ROOT}/bin"
eval "$(pyenv init -)"

### scripts/env/all/shell/02_path

add_to_path "${HOME}/.scripts"

### homebrew/env/Darwin/shell/03_functions

my_brew_update() {
    brew update && \
        brew upgrade && \
        brew upgrade --cask && \
        brew cleanup --prune=0
}

### tcdn/env/all/shell/04_aliases

alias tcdn="ssh -l msanchez admin-eemgcp1 -o 'ServerAliveInterval 60'"

### kitty/env/all/shell/04_aliases

if [[ -n "$IN_KITTY" ]]; then
    alias kdiff='kitty +kitten diff'
    alias sudo='TERM=xterm-256color sudo'
fi


### shell_private/env/all/shell/33_completion

# Adds completion to the "dotfiles" function
complete -W "$(find $DOTFILES/topics/* -maxdepth 0 -type d -exec basename {} \;) \
$(find $PRIVATE_DOTFILES/topics/* -maxdepth 0 -type d -exec basename {} \;)" dotfiles

### homebrew/env/Darwin/shell/40_path

add_to_path "/usr/local/bin"
add_to_path "/usr/local/sbin"
add_to_path "/usr/local/opt/coreutils/libexec/gnubin"
add_to_path "/usr/local/opt/findutils/libexec/gnubin"
add_to_path "/usr/local/opt/diffutils/bin"
add_to_path "/usr/local/opt/grep/libexec/gnubin"
add_to_path "/usr/local/opt/gnu-sed/libexec/gnubin"
add_to_path "/usr/local/opt/curl/bin"

### tmux/env/all/shell/99_settings

if [[ -n $IN_TMUX ]]; then
    if [[ "$TERM" == "tmux-256color" ]]; then
        # remote hosts usually don't have tmux-256color terminfo
        export SSH_TERM="xterm-256color"
    fi
    alias sudo='TERM=xterm-256color sudo'
fi
